#pragma once

// Standard libraries
#include <stdint.h>
#include <type_traits>

// Third-party libraries

// Phyllo

#define PHYLLO_CRC_TABLE_RAM 0
#define PHYLLO_CRC_TABLE_PROGMEM 1

#ifndef PHYLLO_CRC
#define PHYLLO_CRC PHYLLO_CRC_TABLE_PROGMEM
#endif

namespace Phyllo { namespace Util {

using CRC = uint32_t;
const CRC kCRCInitialRemainder = 0xFFFFFFFF;
const CRC kCRCFinalXORValue = 0xFFFFFFFF;
//const CRC kCRCPolynomial = 0x000001ED; // Ray32sub8, described in https://users.ece.cmu.edu/~koopman/pubs/ray06_crcalgorithms.pdf and https://users.ece.cmu.edu/~koopman/crc/crc32.html, has HD=6 on data < 343 bytes (which is beyond max packet length) and is optimized for embedded systems
const CRC kCRCPolynomial = 0xB7800000; // Reflection of Ray32sub8

// Reflected lookup table generated at http://www.sunshine2k.de/coding/javascript/crc/crc_js.html using polynomial 0x01ED, with the lowest 4 bytes removed to save space because they are all zero
#if PHYLLO_CRC == PHYLLO_CRC_TABLE_RAM
const uint16_t kCRCTable[256] = {
#elif PHYLLO_CRC == PHYLLO_CRC_TABLE_PROGMEM
const uint16_t kCRCTable[256] PROGMEM = {
#endif
  0x0000, 0x016F, 0x02DE, 0x03B1, 0x05BC, 0x04D3, 0x0762, 0x060D,
  0x0B78, 0x0A17, 0x09A6, 0x08C9, 0x0EC4, 0x0FAB, 0x0C1A, 0x0D75,
  0x16F0, 0x179F, 0x142E, 0x1541, 0x134C, 0x1223, 0x1192, 0x10FD,
  0x1D88, 0x1CE7, 0x1F56, 0x1E39, 0x1834, 0x195B, 0x1AEA, 0x1B85,
  0x2DE0, 0x2C8F, 0x2F3E, 0x2E51, 0x285C, 0x2933, 0x2A82, 0x2BED,
  0x2698, 0x27F7, 0x2446, 0x2529, 0x2324, 0x224B, 0x21FA, 0x2095,
  0x3B10, 0x3A7F, 0x39CE, 0x38A1, 0x3EAC, 0x3FC3, 0x3C72, 0x3D1D,
  0x3068, 0x3107, 0x32B6, 0x33D9, 0x35D4, 0x34BB, 0x370A, 0x3665,
  0x5BC0, 0x5AAF, 0x591E, 0x5871, 0x5E7C, 0x5F13, 0x5CA2, 0x5DCD,
  0x50B8, 0x51D7, 0x5266, 0x5309, 0x5504, 0x546B, 0x57DA, 0x56B5,
  0x4D30, 0x4C5F, 0x4FEE, 0x4E81, 0x488C, 0x49E3, 0x4A52, 0x4B3D,
  0x4648, 0x4727, 0x4496, 0x45F9, 0x43F4, 0x429B, 0x412A, 0x4045,
  0x7620, 0x774F, 0x74FE, 0x7591, 0x739C, 0x72F3, 0x7142, 0x702D,
  0x7D58, 0x7C37, 0x7F86, 0x7EE9, 0x78E4, 0x798B, 0x7A3A, 0x7B55,
  0x60D0, 0x61BF, 0x620E, 0x6361, 0x656C, 0x6403, 0x67B2, 0x66DD,
  0x6BA8, 0x6AC7, 0x6976, 0x6819, 0x6E14, 0x6F7B, 0x6CCA, 0x6DA5,
  0xB780, 0xB6EF, 0xB55E, 0xB431, 0xB23C, 0xB353, 0xB0E2, 0xB18D,
  0xBCF8, 0xBD97, 0xBE26, 0xBF49, 0xB944, 0xB82B, 0xBB9A, 0xBAF5,
  0xA170, 0xA01F, 0xA3AE, 0xA2C1, 0xA4CC, 0xA5A3, 0xA612, 0xA77D,
  0xAA08, 0xAB67, 0xA8D6, 0xA9B9, 0xAFB4, 0xAEDB, 0xAD6A, 0xAC05,
  0x9A60, 0x9B0F, 0x98BE, 0x99D1, 0x9FDC, 0x9EB3, 0x9D02, 0x9C6D,
  0x9118, 0x9077, 0x93C6, 0x92A9, 0x94A4, 0x95CB, 0x967A, 0x9715,
  0x8C90, 0x8DFF, 0x8E4E, 0x8F21, 0x892C, 0x8843, 0x8BF2, 0x8A9D,
  0x87E8, 0x8687, 0x8536, 0x8459, 0x8254, 0x833B, 0x808A, 0x81E5,
  0xEC40, 0xED2F, 0xEE9E, 0xEFF1, 0xE9FC, 0xE893, 0xEB22, 0xEA4D,
  0xE738, 0xE657, 0xE5E6, 0xE489, 0xE284, 0xE3EB, 0xE05A, 0xE135,
  0xFAB0, 0xFBDF, 0xF86E, 0xF901, 0xFF0C, 0xFE63, 0xFDD2, 0xFCBD,
  0xF1C8, 0xF0A7, 0xF316, 0xF279, 0xF474, 0xF51B, 0xF6AA, 0xF7C5,
  0xC1A0, 0xC0CF, 0xC37E, 0xC211, 0xC41C, 0xC573, 0xC6C2, 0xC7AD,
  0xCAD8, 0xCBB7, 0xC806, 0xC969, 0xCF64, 0xCE0B, 0xCDBA, 0xCCD5,
  0xD750, 0xD63F, 0xD58E, 0xD4E1, 0xD2EC, 0xD383, 0xD032, 0xD15D,
  0xDC28, 0xDD47, 0xDEF6, 0xDF99, 0xD994, 0xD8FB, 0xDB4A, 0xDA25
};

// Adapted from https://barrgroup.com/Embedded-Systems/How-To/CRC-Calculation-C-Code and https://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks#Multi-bit_computation
CRC reflectedCRC32sub8(uint8_t const message[], int nBytes) {
  CRC remainder = kCRCInitialRemainder;

  // Divide the message by the polynomial, a byte at a time.
  for (int byte = 0; byte < nBytes; ++byte) {
    uint8_t data = message[byte] ^ (remainder & 0xFF);
    #if PHYLLO_CRC == PHYLLO_CRC_TABLE_RAM
    uint32_t table_entry = kCRCTable[data];
    #elif PHYLLO_CRC == PHYLLO_CRC_TABLE_PROGMEM
    uint32_t table_entry = pgm_read_word_near(kCRCTable + data);
    #endif
    remainder = (table_entry << 16) ^ (remainder >> 8);
  }

  return remainder ^ kCRCFinalXORValue;
}

} }