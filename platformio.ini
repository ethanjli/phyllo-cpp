;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
description = Point-to-point communication protocol suite for serial connections
default_envs =
  ;teensy40
  ;teensy36
  ;teensylc
  dueUSB
  ;due
  ;nano_every
  ;micro
  ;uno
include_dir = src
src_dir = examples

; Shared environment configurations

[env]
framework = arduino
lib_deps =
  ; Phyllo:
  Embedded Template Library
  ; StreamLink:
  ; ChunkedStreamLink:
  ; FrameLink:
  PacketSerial
  ; DatagramLink:
  ; ValidatedDatagramLink:
  ; CRC:
  ; ARQ:
  elapsedMillis
  ; ReliableBufferLink:
  ; DocumentLink:
  https://github.com/ethanjli/mpack/
  ; CommandLink:
  ; Application:
build_flags =
  ; MPack
  -D MPACK_STDLIB=0
  -D MPACK_STDIO=0
  -D MPACK_STRINGS=0
monitor_speed = 115200
build_type = release
;build_type = debug
src_filter =
  ;+<main.cpp>
  ;+<pubsub/Endpoints.cpp>
  +<pubsub/Router.cpp>
  ;+<tests/Blink.cpp>
  ;+<tests/EchoStream.cpp>
  ;+<tests/AnnounceProtocol.cpp>
  ;+<tests/EchoTransport.cpp>
  ;+<tests/EchoProtocol.cpp>

[env:uart] ; Preset for serial communication over UART (instead of native USB)
build_flags =
  ; Phyllo
  -D PHYLLO_USB_SERIAL_RATE=115200

[env:avr] ; Preset for 8-bit AVR microcontrollers
lib_deps =
  ArduinoSTL
build_flags =
  ; MPack
  -D MPACK_DOUBLES=0

[env:constrained] ; Preset for low-RAM microcontrollers
build_flags =
  ; Phyllo
  -D PHYLLO_TRANSPORT_CHUNK_SIZE_LIMIT=80 ; Decrease this to reduce memory usage at the cost of message size limit
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_PROGMEM ; save RAM

; Board-specfic configurations for ARM microcontrollers

[env:teensy40]
platform = teensy
board = teensy40 ; High-RAM board allows large chunks, except for bug in Teensyduino version 1.48 fixed in version 1.49; extremely fast
build_flags =
  ${env.build_flags}
  ; Phyllo
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_RAM

[env:teensy36]
platform = teensy
board = teensy36 ; High-RAM board allows large chunks
build_flags =
  ${env.build_flags}
  ; Teensy
  -D TEENSY_OPT_FASTEST_LTO ; To increase processing speed
  ; ETL
  -D ETL_NO_CHECKS ; ETL asserts cause problems on this platform (missing _write in lib_c.a with nano.spec), so we disable asserts
  ; Phyllo
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_RAM

[env:teensylc]
platform = teensy
board = teensylc ; Low-RAM board limits chunk sizes; somewhat fast
build_flags =
  ${env.build_flags}
  ; Teensy
  ;-D TEENSY_OPT_FAST_LTO ; To increase processing speed
  -D TEENSY_OPT_SMALLEST_CODE ; To reduce RAM usage
  ; ETL
  -D ETL_NO_CHECKS ; ETL asserts cause problems on this platform (missing _write in lib_c.a with nano.spec), so we disable asserts
  ; Phyllo
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_RAM ; change this to PHYLLO_CRC_TABLE_PROGMEM to save RAM at the cost of speed

[env:due]
platform = atmelsam
board = due ; High-RAM board allows large chunks; slow
build_flags =
  ${env.build_flags}
  ${env:uart.build_flags}
  ; Phyllo
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_RAM

[env:dueUSB]
platform = atmelsam
board = dueUSB ; High-RAM board allows large chunks; very fast
build_flags =
  ${env.build_flags}
  ; Phyllo
  -D PHYLLO_USB_SERIAL=PHYLLO_USB_SERIAL_DUE
  -D PHYLLO_CRC=PHYLLO_CRC_TABLE_RAM

; Board-specfic configurations for AVR microcontrollers

[env:nano_every]
platform = atmelmegaavr
board = nano_every
lib_deps =
  ${env.lib_deps}
  ${env:avr.lib_deps}
build_flags =
  ${env.build_flags}
  ${env:avr.build_flags}

[env:micro]
platform = atmelavr
board = micro ; Low-RAM board limits chunk sizes; somewhat fast
lib_deps =
  ${env.lib_deps}
  ${env:avr.lib_deps}
build_flags =
  ${env.build_flags}
  ${env:avr.build_flags}
  ${env:constrained.build_flags}

[env:uno]
platform = atmelavr
board = uno ; Very-low-RAM board limits chunk sizes; very slow
lib_deps =
  ${env.lib_deps}
  ${env:avr.lib_deps}
build_flags =
  ${env.build_flags}
  ${env:avr.build_flags}
  ${env:uart.build_flags}
  ${env:constrained.build_flags}